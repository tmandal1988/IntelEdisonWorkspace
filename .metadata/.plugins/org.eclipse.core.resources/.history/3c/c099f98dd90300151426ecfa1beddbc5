/*Tanmay Kumar Mandal
 * Data: 05/20/2015
 * Testing the SPI functionality
 */

#include "mraa.hpp"

#include <iostream>
#include <unistd.h>

int main() {

	//mraa::Gpio* cs0=new mraa::Gpio(23,true, false);
	mraa::Gpio* ledOut = new mraa::Gpio(48, true, false);

	/*	// set the pin as cs0
	 if (cs0->dir(mraa::DIR_OUT) != MRAA_SUCCESS) {
	 std::cerr << "Can't set digital pin as cs0, exiting" << std::endl;
	 return MRAA_ERROR_UNSPECIFIED;
	 }*/

	if (ledOut->dir(mraa::DIR_OUT) != MRAA_SUCCESS) {
		std::cerr << "Can't set digital pin as output, exiting" << std::endl;
		return MRAA_ERROR_UNSPECIFIED;
	}
	mraa_gpio_context gpio;
	gpio = mraa_gpio_init(23);

	mraa_gpio_use_mmaped(gpio, 1);

	mraa::Spi* IMU = new mraa::Spi(0);
	if (IMU->mode(mraa::SPI_MODE3) != MRAA_SUCCESS
			|| IMU->bitPerWord(16) != MRAA_SUCCESS
			|| IMU->frequency(1000000) != MRAA_SUCCESS) {

		std::cerr << "Can't set SPI 0" << std::endl;
		return MRAA_ERROR_UNSPECIFIED;
	}

	static uint8_t SPI_command[] = { 0x00, 0x26 };
	static uint8_t fake[]={0x00,0x00};
	uint8_t* rcvBuf;
	ledOut->write(1);

	while (1) {

		usleep(250);
		mraa_gpio_write(gpio, 1);

		IMU->write(SPI_command, 2);
		rcvBuf=IMU->write(fake, 2);
		mraa_gpio_write(gpio, 0);

		if(rcvBuf){
			float Az = 0.00025 * (short int) (rcvBuf[1] * 256 + rcvBuf[0]);
			//printf("%g \n", Az);
		}

	}

	return MRAA_SUCCESS;
}
